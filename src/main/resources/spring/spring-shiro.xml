<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--============================================== Realm===================================================-->
    <!-- realm实现。realm是shiro的桥梁，它主要是用来判断subject是否可以登录及权限等 -->
    <!-- 继承自 AuthorizingRealm 的自定义 Realm (解决初始化时的依赖循环问题，通过这里向 realm 中注入 userservice 实现)-->
    <bean id="realm" class="shiro.MyRealm"/>

    <!-- ============================================== 安全管理器 ============================================== -->
    <!-- 安全管理器。securityManager是shiro的核心，初始化时协调各个模块运行 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--单个realm使用realm,如果有多个realm，使用realms属性代替-->
        <property name="realm" ref="realm"/>
        <!-- 缓存管理 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!--session 管理 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!-- 记住我 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>
    <!-- 缓存管理器。用户授权/认证信息Cache, 采用EhCache缓存 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:spring/ehcache-shiro.xml"/>
    </bean>
    <!-- 会话管理器，设置过期时间等属性 -->
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <!-- 删除失效的 session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- session 的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="600000"/>
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionValidationSchedulerEnabled" value="false"/>
    </bean>
    <!-- rememberMeManager 管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <!-- 记住我 cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <!-- 记住我 cookie 生效时间 30 天 -->
        <property name="maxAge" value="2592000"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 自定义form认证过滤器filter -->
    <!-- 基于Form表单的身份验证过滤器。不配置将也会注册此过滤器，表单中的用户账号、密码及 loginurl 将采用默认值，建议配置 -->
    <bean id="formAuthenticationFilter" class="filter.MyFormAuthenticationFilter">
        <!-- 表单中账户、密码和记住我的input框名称 -->
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>
    <bean id="logoutFilter" class="filter.MyLogoutFilter"/>
    <bean id="roles" class="filter.MyRoleFilter"/>
    <bean id="perms" class="filter.MyURLPermissionFilter"/>


    <!-- 开启 Shiro 注解的 Spring 配置方式的 beans。在 lifecycleBeanPostProcessor 之后运行 -->
    <!-- Shiro生命周期处理器，保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Shiro 的 Web 过滤器。bean的id值须与web中的filter-name的值相同(与 web.xml 对应的 bean) -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 自定义 filter 配置 -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="roles" value-ref="roles"/>
                <entry key="perms" value-ref="perms"/>
            </util:map>
        </property>
        <!-- 如果没有认证将要跳转的登陆地址，http可访问的url，如果不在表单认证过滤器 FormAuthenticationFilter 中指定此地址就为身份认证地址 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登录成功的地址 -->
        <property name="successUrl" value="/index"/>
        <!-- 没有权限跳转的地址 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- 过滤链定义，表示对应的 url mapping 需要对应的权限。从上而下，将匿名的 anon 放最下面 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 表示所有请求 url 必须通过认证 -->
                /** = authc

                <!--/authc/admin需要用户有用admin权限、/authc/**用户必须登录才能访问、/**其他所有路径任何人都可以访问-->
                <!-- 静态资源通过 -->
                /images/** = anon
                /js/** = anon
                /css/** = anon
                /*.jar = anon
                /*.ico = anon
                /login = anon
                /register = anon
                /forgot =anon
                /getValidateCode = anon  <!-- 验证码 -->

                /admin.jsp = roles[admin]
                /user/create=roles[admin]

                <!-- 登录页面的地址 -->
                /toLogin = anon
                <!-- 跳转没有权限的页面 -->
                /noPermission/** = anon

                <!-- 只要任意url能够跳转到/logout, 便会自动注销session -->
                /logout = logout
            </value>
        </property>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

</beans>